import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Search, Filter, X, ChevronDown, ChevronUp, RotateCcw } from 'lucide-react';
export const BaseRestaurantFiltersComponent = ({ restaurants, filters, onFiltersChange, onClearFilters }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    // Obtener valores Ãºnicos para los filtros
    const uniqueCities = [...new Set(restaurants.map(r => r.city).filter(Boolean))].sort();
    const uniqueStates = [...new Set(restaurants.map(r => r.state).filter(Boolean))].sort();
    const uniqueAutonomousCommunities = [...new Set(restaurants.map(r => r.autonomous_community).filter(Boolean))].sort();
    const uniqueRestaurantTypes = [...new Set(restaurants.map(r => r.restaurant_type).filter(Boolean))].sort();
    const uniquePropertyTypes = [...new Set(restaurants.map(r => r.property_type).filter(Boolean))].sort();
    const handleFilterChange = useCallback((key, value) => {
        onFiltersChange({
            ...filters,
            [key]: value
        });
    }, [filters, onFiltersChange]);
    const getActiveFiltersCount = () => {
        let count = 0;
        if (filters.search)
            count++;
        if (filters.city)
            count++;
        if (filters.state)
            count++;
        if (filters.autonomousCommunity)
            count++;
        if (filters.restaurantType)
            count++;
        if (filters.propertyType)
            count++;
        return count;
    };
    const activeFiltersCount = getActiveFiltersCount();
    return (_jsx(Card, { className: "mb-6", children: _jsxs(Collapsible, { open: isExpanded, onOpenChange: setIsExpanded, children: [_jsx(CollapsibleTrigger, { asChild: true, children: _jsx(CardHeader, { className: "cursor-pointer hover:bg-gray-50 transition-colors", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Filter, { className: "w-5 h-5" }), "Filtros de Restaurantes"] }), activeFiltersCount > 0 && (_jsxs(Badge, { variant: "secondary", className: "bg-blue-100 text-blue-800", children: [activeFiltersCount, " activo", activeFiltersCount !== 1 ? 's' : ''] }))] }), _jsxs("div", { className: "flex items-center gap-2", children: [activeFiltersCount > 0 && (_jsxs(Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                                e.stopPropagation();
                                                onClearFilters();
                                            }, className: "h-8 px-2", children: [_jsx(RotateCcw, { className: "w-4 h-4 mr-1" }), "Limpiar"] })), isExpanded ? (_jsx(ChevronUp, { className: "w-5 h-5" })) : (_jsx(ChevronDown, { className: "w-5 h-5" }))] })] }) }) }), _jsx(CollapsibleContent, { children: _jsxs(CardContent, { className: "pt-0", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "search", children: "B\u00FAsqueda General" }), _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400" }), _jsx(Input, { id: "search", placeholder: "Nombre, n\u00FAmero, direcci\u00F3n...", value: filters.search, onChange: (e) => handleFilterChange('search', e.target.value), className: "pl-10" }), filters.search && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleFilterChange('search', ''), className: "absolute right-1 top-1 h-8 w-8 p-0", children: _jsx(X, { className: "w-4 h-4" }) }))] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Ciudad" }), _jsxs(Select, { value: filters.city, onValueChange: (value) => handleFilterChange('city', value === 'all-cities' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todas las ciudades" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-cities", children: "Todas las ciudades" }), uniqueCities.map((city) => (_jsx(SelectItem, { value: city, children: city }, city)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Provincia" }), _jsxs(Select, { value: filters.state, onValueChange: (value) => handleFilterChange('state', value === 'all-states' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todas las provincias" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-states", children: "Todas las provincias" }), uniqueStates.map((state) => (_jsx(SelectItem, { value: state, children: state }, state)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Comunidad Aut\u00F3noma" }), _jsxs(Select, { value: filters.autonomousCommunity, onValueChange: (value) => handleFilterChange('autonomousCommunity', value === 'all-communities' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todas las comunidades" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-communities", children: "Todas las comunidades" }), uniqueAutonomousCommunities.map((community) => (_jsx(SelectItem, { value: community, children: community }, community)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Tipo de Restaurante" }), _jsxs(Select, { value: filters.restaurantType, onValueChange: (value) => handleFilterChange('restaurantType', value === 'all-types' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todos los tipos" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-types", children: "Todos los tipos" }), uniqueRestaurantTypes.map((type) => (_jsx(SelectItem, { value: type, children: type }, type)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Tipo de Propiedad" }), _jsxs(Select, { value: filters.propertyType, onValueChange: (value) => handleFilterChange('propertyType', value === 'all-properties' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todos los tipos" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-properties", children: "Todos los tipos" }), uniquePropertyTypes.map((type) => (_jsx(SelectItem, { value: type, children: type }, type)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Ordenar por" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Select, { value: filters.sortBy, onValueChange: (value) => handleFilterChange('sortBy', value), children: [_jsx(SelectTrigger, { className: "flex-1", children: _jsx(SelectValue, { placeholder: "Campo" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "restaurant_name", children: "Nombre" }), _jsx(SelectItem, { value: "site_number", children: "N\u00FAmero" }), _jsx(SelectItem, { value: "city", children: "Ciudad" }), _jsx(SelectItem, { value: "autonomous_community", children: "Comunidad" }), _jsx(SelectItem, { value: "created_at", children: "Fecha de creaci\u00F3n" })] })] }), _jsxs(Select, { value: filters.sortOrder, onValueChange: (value) => handleFilterChange('sortOrder', value), children: [_jsx(SelectTrigger, { className: "w-20", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "asc", children: "\u2191" }), _jsx(SelectItem, { value: "desc", children: "\u2193" })] })] })] })] })] }), activeFiltersCount > 0 && (_jsx("div", { className: "mt-4 pt-4 border-t", children: _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Filtros activos:" }), filters.search && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["B\u00FAsqueda: \"", filters.search, "\"", _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('search', '') })] })), filters.city && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Ciudad: ", filters.city, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('city', '') })] })), filters.state && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Provincia: ", filters.state, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('state', '') })] })), filters.autonomousCommunity && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Comunidad: ", filters.autonomousCommunity, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('autonomousCommunity', '') })] })), filters.restaurantType && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Tipo: ", filters.restaurantType, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('restaurantType', '') })] })), filters.propertyType && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Propiedad: ", filters.propertyType, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('propertyType', '') })] }))] }) }))] }) })] }) }));
};
