import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { Search, Filter, X, ChevronDown, ChevronUp, RotateCcw } from 'lucide-react';
export const FranchiseeFiltersComponent = ({ franchisees, filters, onFiltersChange, onClearFilters }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    // Obtener valores Ãºnicos para los filtros
    const uniqueCities = [...new Set(franchisees.map(f => f.city).filter(Boolean))].sort();
    const uniqueStates = [...new Set(franchisees.map(f => f.state).filter(Boolean))].sort();
    const handleFilterChange = useCallback((key, value) => {
        onFiltersChange({
            ...filters,
            [key]: value
        });
    }, [filters, onFiltersChange]);
    const getActiveFiltersCount = () => {
        let count = 0;
        if (filters.search)
            count++;
        if (filters.city)
            count++;
        if (filters.state)
            count++;
        if (filters.restaurantCount)
            count++;
        if (filters.hasEmail)
            count++;
        if (filters.hasTaxId)
            count++;
        if (filters.hasCompanyName)
            count++;
        return count;
    };
    const activeFiltersCount = getActiveFiltersCount();
    return (_jsx(Card, { className: "mb-6", children: _jsxs(Collapsible, { open: isExpanded, onOpenChange: setIsExpanded, children: [_jsx(CollapsibleTrigger, { asChild: true, children: _jsx(CardHeader, { className: "cursor-pointer hover:bg-gray-50 transition-colors", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Filter, { className: "w-5 h-5" }), "Filtros Avanzados"] }), activeFiltersCount > 0 && (_jsxs(Badge, { variant: "secondary", className: "bg-blue-100 text-blue-800", children: [activeFiltersCount, " activo", activeFiltersCount !== 1 ? 's' : ''] }))] }), _jsxs("div", { className: "flex items-center gap-2", children: [activeFiltersCount > 0 && (_jsxs(Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                                e.stopPropagation();
                                                onClearFilters();
                                            }, className: "h-8 px-2", children: [_jsx(RotateCcw, { className: "w-4 h-4 mr-1" }), "Limpiar"] })), isExpanded ? (_jsx(ChevronUp, { className: "w-5 h-5" })) : (_jsx(ChevronDown, { className: "w-5 h-5" }))] })] }) }) }), _jsx(CollapsibleContent, { children: _jsxs(CardContent, { className: "pt-0", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "search", children: "B\u00FAsqueda General" }), _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-3 h-4 w-4 text-gray-400" }), _jsx(Input, { id: "search", placeholder: "Nombre, empresa, email...", value: filters.search, onChange: (e) => handleFilterChange('search', e.target.value), className: "pl-10" }), filters.search && (_jsx(Button, { variant: "ghost", size: "sm", onClick: () => handleFilterChange('search', ''), className: "absolute right-1 top-1 h-8 w-8 p-0", children: _jsx(X, { className: "w-4 h-4" }) }))] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Ciudad" }), _jsxs(Select, { value: filters.city, onValueChange: (value) => handleFilterChange('city', value === 'all-cities' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todas las ciudades" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-cities", children: "Todas las ciudades" }), uniqueCities.map((city) => (_jsx(SelectItem, { value: city, children: city }, city)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Provincia" }), _jsxs(Select, { value: filters.state, onValueChange: (value) => handleFilterChange('state', value === 'all-states' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Todas las provincias" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all-states", children: "Todas las provincias" }), uniqueStates.map((state) => (_jsx(SelectItem, { value: state, children: state }, state)))] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "N\u00FAmero de Restaurantes" }), _jsxs(Select, { value: filters.restaurantCount, onValueChange: (value) => handleFilterChange('restaurantCount', value === 'any-count' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Cualquier cantidad" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "any-count", children: "Cualquier cantidad" }), _jsx(SelectItem, { value: "0", children: "Sin restaurantes (0)" }), _jsx(SelectItem, { value: "1", children: "1 restaurante" }), _jsx(SelectItem, { value: "2-5", children: "2-5 restaurantes" }), _jsx(SelectItem, { value: "6-10", children: "6-10 restaurantes" }), _jsx(SelectItem, { value: "11+", children: "M\u00E1s de 10 restaurantes" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Tiene Email" }), _jsxs(Select, { value: filters.hasEmail, onValueChange: (value) => handleFilterChange('hasEmail', value === 'any-email' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Cualquiera" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "any-email", children: "Cualquiera" }), _jsx(SelectItem, { value: "yes", children: "Con email" }), _jsx(SelectItem, { value: "no", children: "Sin email" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Tiene CIF/NIF" }), _jsxs(Select, { value: filters.hasTaxId, onValueChange: (value) => handleFilterChange('hasTaxId', value === 'any-tax' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Cualquiera" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "any-tax", children: "Cualquiera" }), _jsx(SelectItem, { value: "yes", children: "Con CIF/NIF" }), _jsx(SelectItem, { value: "no", children: "Sin CIF/NIF" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Tiene Empresa" }), _jsxs(Select, { value: filters.hasCompanyName, onValueChange: (value) => handleFilterChange('hasCompanyName', value === 'any-company' ? '' : value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Cualquiera" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "any-company", children: "Cualquiera" }), _jsx(SelectItem, { value: "yes", children: "Con empresa" }), _jsx(SelectItem, { value: "no", children: "Sin empresa" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Ordenar por" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Select, { value: filters.sortBy, onValueChange: (value) => handleFilterChange('sortBy', value), children: [_jsx(SelectTrigger, { className: "flex-1", children: _jsx(SelectValue, { placeholder: "Campo" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "franchisee_name", children: "Nombre" }), _jsx(SelectItem, { value: "company_name", children: "Empresa" }), _jsx(SelectItem, { value: "city", children: "Ciudad" }), _jsx(SelectItem, { value: "total_restaurants", children: "Restaurantes" }), _jsx(SelectItem, { value: "created_at", children: "Fecha de creaci\u00F3n" })] })] }), _jsxs(Select, { value: filters.sortOrder, onValueChange: (value) => handleFilterChange('sortOrder', value), children: [_jsx(SelectTrigger, { className: "w-20", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "asc", children: "\u2191" }), _jsx(SelectItem, { value: "desc", children: "\u2193" })] })] })] })] })] }), activeFiltersCount > 0 && (_jsx("div", { className: "mt-4 pt-4 border-t", children: _jsxs("div", { className: "flex flex-wrap gap-2", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Filtros activos:" }), filters.search && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["B\u00FAsqueda: \"", filters.search, "\"", _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('search', '') })] })), filters.city && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Ciudad: ", filters.city, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('city', '') })] })), filters.state && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Provincia: ", filters.state, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('state', '') })] })), filters.restaurantCount && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Restaurantes: ", filters.restaurantCount, _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('restaurantCount', '') })] })), filters.hasEmail && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Email: ", filters.hasEmail === 'yes' ? 'Con email' : 'Sin email', _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('hasEmail', '') })] })), filters.hasTaxId && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["CIF/NIF: ", filters.hasTaxId === 'yes' ? 'Con CIF/NIF' : 'Sin CIF/NIF', _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('hasTaxId', '') })] })), filters.hasCompanyName && (_jsxs(Badge, { variant: "outline", className: "gap-1", children: ["Empresa: ", filters.hasCompanyName === 'yes' ? 'Con empresa' : 'Sin empresa', _jsx(X, { className: "w-3 h-3 cursor-pointer", onClick: () => handleFilterChange('hasCompanyName', '') })] }))] }) }))] }) })] }) }));
};
