import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Input } from '@/components/ui/input';
import { formatCurrency, getVarianceColor, getVariancePercentage } from './BudgetTableUtils';
export const BudgetTableCell = ({ budgetValue, actualValue, viewMode, isCategory, rowId, field, editingCell, onCellClick, onInputChange, onInputBlur, onKeyPress, onActualChange }) => {
    const isBudgetEditing = editingCell?.rowId === rowId && editingCell?.field === field && !editingCell?.isActual;
    const isActualEditing = editingCell?.rowId === rowId && editingCell?.field === field && editingCell?.isActual;
    const handleActualInputChange = (value) => {
        const numValue = parseFloat(value) || 0;
        onActualChange(rowId, field, numValue);
    };
    if (isCategory) {
        return (_jsxs("div", { className: viewMode === 'comparison' ? "grid grid-cols-3 gap-1" : "flex justify-center", children: [viewMode !== 'actuals' && (_jsx("span", { className: "text-blue-700 font-bold text-sm py-2", children: formatCurrency(budgetValue) })), viewMode === 'actuals' && (_jsx("span", { className: "text-green-700 font-bold text-sm py-2", children: formatCurrency(actualValue) })), viewMode === 'comparison' && (_jsxs(_Fragment, { children: [_jsx("span", { className: `font-bold text-sm py-2 ${getVarianceColor(budgetValue, actualValue)}`, children: formatCurrency(actualValue) }), _jsx("span", { className: `font-bold text-xs py-2 ${getVarianceColor(budgetValue, actualValue)}`, children: getVariancePercentage(budgetValue, actualValue) })] }))] }));
    }
    return (_jsxs("div", { className: viewMode === 'comparison' ? "grid grid-cols-3 gap-1" : "flex justify-center", children: [viewMode !== 'actuals' && (_jsx("div", { className: `cursor-pointer hover:bg-blue-50 p-2 rounded ${viewMode === 'comparison' ? '' : 'border-r border-gray-200'}`, onClick: () => onCellClick(rowId, field, isCategory, false), children: isBudgetEditing ? (_jsx(Input, { type: "number", defaultValue: budgetValue, onChange: (e) => onInputChange(e.target.value), onBlur: onInputBlur, onKeyPress: onKeyPress, className: "w-full text-center text-sm h-8 border-blue-300 focus:border-blue-500", autoFocus: true, step: "100" })) : (_jsx("span", { className: "text-blue-700 font-semibold text-sm block py-1", children: formatCurrency(budgetValue) })) })), viewMode === 'actuals' && (_jsx("div", { className: `cursor-pointer hover:bg-green-50 p-2 rounded`, onClick: () => onCellClick(rowId, field, isCategory, true), children: isActualEditing ? (_jsx(Input, { type: "number", defaultValue: actualValue, onChange: (e) => handleActualInputChange(e.target.value), onBlur: onInputBlur, onKeyPress: onKeyPress, className: "w-full text-center text-sm h-8 border-green-300 focus:border-green-500", autoFocus: true, step: "100" })) : (_jsx("span", { className: "text-green-700 font-semibold text-sm block py-1", children: formatCurrency(actualValue) })) })), viewMode === 'comparison' && (_jsxs(_Fragment, { children: [_jsx("div", { className: `cursor-pointer hover:bg-green-50 p-2 rounded`, onClick: () => onCellClick(rowId, field, isCategory, true), children: isActualEditing ? (_jsx(Input, { type: "number", defaultValue: actualValue, onChange: (e) => handleActualInputChange(e.target.value), onBlur: onInputBlur, onKeyPress: onKeyPress, className: "w-full text-center text-sm h-8 border-green-300 focus:border-green-500", autoFocus: true, step: "100" })) : (_jsx("span", { className: `font-semibold text-sm block py-1 ${getVarianceColor(budgetValue, actualValue)}`, children: formatCurrency(actualValue) })) }), _jsx("div", { className: "p-2", children: _jsx("span", { className: `font-semibold text-xs block py-1 ${getVarianceColor(budgetValue, actualValue)}`, children: getVariancePercentage(budgetValue, actualValue) }) })] }))] }));
};
