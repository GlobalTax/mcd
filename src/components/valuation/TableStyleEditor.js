import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Palette, RotateCcw } from 'lucide-react';
const defaultStyles = {
    headerBg: '#1f2937',
    headerTextColor: '#ffffff',
    cellBg: '#ffffff',
    cellTextColor: '#374151',
    editableCellBg: '#dbeafe',
    borderColor: '#d1d5db',
    fontSize: '14px',
    fontFamily: 'Manrope, Inter, system-ui, sans-serif'
};
const TableStyleEditor = ({ styles, onStylesChange }) => {
    const [showEditor, setShowEditor] = useState(false);
    const handleStyleChange = (key, value) => {
        onStylesChange({
            ...styles,
            [key]: value
        });
    };
    const resetToDefaults = () => {
        onStylesChange(defaultStyles);
    };
    return (_jsxs(Card, { className: "mb-6", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Palette, { className: "w-5 h-5" }), "Editor de Estilos de Tabla"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => setShowEditor(!showEditor), children: [showEditor ? 'Ocultar' : 'Mostrar', " Editor"] })] }) }), showEditor && (_jsxs(CardContent, { children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "headerBg", children: "Color de Fondo del Encabezado" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "headerBg", type: "color", value: styles.headerBg, onChange: (e) => handleStyleChange('headerBg', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.headerBg, onChange: (e) => handleStyleChange('headerBg', e.target.value), placeholder: "#1f2937", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "headerTextColor", children: "Color de Texto del Encabezado" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "headerTextColor", type: "color", value: styles.headerTextColor, onChange: (e) => handleStyleChange('headerTextColor', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.headerTextColor, onChange: (e) => handleStyleChange('headerTextColor', e.target.value), placeholder: "#ffffff", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "cellBg", children: "Color de Fondo de Celdas" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "cellBg", type: "color", value: styles.cellBg, onChange: (e) => handleStyleChange('cellBg', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.cellBg, onChange: (e) => handleStyleChange('cellBg', e.target.value), placeholder: "#ffffff", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "cellTextColor", children: "Color de Texto de Celdas" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "cellTextColor", type: "color", value: styles.cellTextColor, onChange: (e) => handleStyleChange('cellTextColor', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.cellTextColor, onChange: (e) => handleStyleChange('cellTextColor', e.target.value), placeholder: "#374151", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "editableCellBg", children: "Color de Celdas Editables" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "editableCellBg", type: "color", value: styles.editableCellBg, onChange: (e) => handleStyleChange('editableCellBg', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.editableCellBg, onChange: (e) => handleStyleChange('editableCellBg', e.target.value), placeholder: "#dbeafe", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "borderColor", children: "Color de Bordes" }), _jsxs("div", { className: "flex gap-2", children: [_jsx(Input, { id: "borderColor", type: "color", value: styles.borderColor, onChange: (e) => handleStyleChange('borderColor', e.target.value), className: "w-16 h-10 p-1" }), _jsx(Input, { type: "text", value: styles.borderColor, onChange: (e) => handleStyleChange('borderColor', e.target.value), placeholder: "#d1d5db", className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "fontSize", children: "Tama\u00F1o de Fuente" }), _jsxs("select", { id: "fontSize", value: styles.fontSize, onChange: (e) => handleStyleChange('fontSize', e.target.value), className: "w-full h-10 px-3 py-2 text-sm border border-gray-300 rounded-md", children: [_jsx("option", { value: "12px", children: "12px" }), _jsx("option", { value: "13px", children: "13px" }), _jsx("option", { value: "14px", children: "14px" }), _jsx("option", { value: "15px", children: "15px" }), _jsx("option", { value: "16px", children: "16px" }), _jsx("option", { value: "18px", children: "18px" })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "fontFamily", children: "Fuente" }), _jsxs("select", { id: "fontFamily", value: styles.fontFamily, onChange: (e) => handleStyleChange('fontFamily', e.target.value), className: "w-full h-10 px-3 py-2 text-sm border border-gray-300 rounded-md", children: [_jsx("option", { value: "Manrope, Inter, system-ui, sans-serif", children: "Manrope" }), _jsx("option", { value: "Inter, system-ui, sans-serif", children: "Inter" }), _jsx("option", { value: "system-ui, sans-serif", children: "System UI" }), _jsx("option", { value: "Arial, sans-serif", children: "Arial" }), _jsx("option", { value: "Georgia, serif", children: "Georgia" }), _jsx("option", { value: "'Courier New', monospace", children: "Courier New" }), _jsx("option", { value: "'Times New Roman', serif", children: "Times New Roman" })] })] })] }), _jsx("div", { className: "flex gap-3 pt-4 mt-4 border-t", children: _jsxs(Button, { variant: "outline", onClick: resetToDefaults, className: "flex items-center gap-2", children: [_jsx(RotateCcw, { className: "w-4 h-4" }), "Restablecer por Defecto"] }) })] }))] }));
};
export { TableStyleEditor, defaultStyles };
